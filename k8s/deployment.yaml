apiVersion: apps/v1
kind: Deployment
metadata:
  name: aeneas-api
  namespace: aeneas
  labels:
    app: aeneas-api
    component: backend
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: aeneas-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: aeneas-api
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: aeneas-api
      containers:
      - name: aeneas-api
        image: aeneas/crypto-signals:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: aeneas-config
              key: app.env
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: aeneas-config
              key: log.level
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: database.url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: redis.url
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: aeneas-config
              key: kafka.bootstrap.servers
        - name: LLM_API_KEY
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: llm.api.key
        - name: TELEGRAM_API_ID
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: telegram.api.id
        - name: TELEGRAM_API_HASH
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: telegram.api.hash
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: jwt.secret.key
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: aeneas-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - aeneas-api
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aeneas-worker
  namespace: aeneas
  labels:
    app: aeneas-worker
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: aeneas-worker
  template:
    metadata:
      labels:
        app: aeneas-worker
        component: backend
    spec:
      serviceAccountName: aeneas-worker
      containers:
      - name: worker
        image: aeneas/crypto-signals:latest
        imagePullPolicy: Always
        command: ["python", "-m", "src.workers.signal_processor"]
        env:
        - name: WORKER_TYPE
          value: "signal_processor"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: database.url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: redis.url
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: aeneas-config
              key: kafka.bootstrap.servers
        - name: LLM_API_KEY
          valueFrom:
            secretKeyRef:
              name: aeneas-secrets
              key: llm.api.key
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "4000m"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: aeneas-api-hpa
  namespace: aeneas
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: aeneas-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
      - type: Percent
        value: 100
        periodSeconds: 15
      selectPolicy: Max
